.TH redo 1 "February 03, 2014" "Redux User Manual"
.SH NAME
.PP
redo - Builds files atomically.
.SH SYNOPSIS
.PP
redux redo [OPTION]...
[TARGET]...
.SH OPTIONS
.PP
-?=false: Show help
.PP
-d=false: Alias for debug
.PP
-debug=false: Print debugging output.
.PP
-h=false: Show help
.PP
-help=false: Show help
.PP
-sh="": Extra arguments for /bin/sh.
.PP
-task=false: Run .do script for side effects and ignore output.
.PP
-v=false: Alias for verbose
.PP
-verbose=false: Be verbose.
Repeat for intensity.
.SH NOTES
.PP
The redo command builds files atomically by running a do script
asssociated with the target.
.PP
redo normally requires one or more target arguments.
If no target arguments are provided, redo runs the default target \@all
in the current directory if its do script \@all.do exists.
.SH DESCRIPTION
.PP
This command can be invoked as \f[C]redux\ redo\f[] or, through a link,
as \f[C]redo\f[].
.PP
A redo target is produced by an sh script whose name has a \[aq].do\[aq]
file extension and, as such, is called a do script.
.PP
For a given target named \f[C]target\f[], the corresponding do file may
be named, in order of decreasing specificity, \f[C]target.do\f[] or
\f[C]default.do\f[].
.PP
For a given target named \f[C]target.ext\f[], the corresponding do file
may be named, in order of decreasing specificity,
\f[C]target.ext.do\f[], \f[C]default.ext.do\f[] or, finally,
\f[C]default.do\f[].
.PP
For targets with multiple extensions, the corresponding do files may be
named, in order of decreasing specificity, \f[C]target.ext.do\f[] where
\f[C]ext\f[] is the full extension, followed by default do files with
shorter and shorter suffixes of the extension, finally ending in
\f[C]default.do\f[].
For example, the target \f[C]file.x.y.z\f[] results in a search for the
following do scripts:
.PP
file.x.y.z.do default.x.y.z.do default.y.z.do default.z.do default.do
.PP
Jumping ahead slightly, note that in the case of multiple extensions,
the $2 argument to the do script contains all but one extension.
In the example above, $2 would be \f[C]file.x.y\f[] for all do files.
Doing otherwise causes the $2 argument to depend on the do file used.
.PP
Redo searches for each of these script files, in order of specificity,
starting in the target\[aq]s directory and moving into parent
directories.
The search stops when a script is found or when the project root
directory has been unsuccessfully searched.
.PP
In the latter case, if the target file exists on disk, it is taken to be
a source file, not generated by script and its metadata is stored in the
database.
The file will be subsequently watched for changes.
.PP
In the former case, where the script is found, it is assumed to be an sh
script and executed with three arguments:
.PP
$1 = path to target, relative to do script directory $2 = same as $1,
with a single file extension, if any, removed $3 = temporary file name
.PP
The script is executed by /bin/sh with the current working directory
(cwd) set to its directory and with stdout opened to a temporary file
(which is unnamed and different from $3).
It is normally expected to produce output on stdout or write to the file
specified by its $3 parameter.
It is an error for a script to write to both outputs.
.PP
If the script completes successfully, redo chooses the correct output,
renames the temporary file to the target file and updates its database
with the new file\[aq]s metadata record.
Since only one of the two temporary files can have content, redo has no
trouble selecting the correct one.
Conversely, if neither file has content, then either is a valid
candidate.
.PP
In the do file, which is an sh script, the line
.IP
.nf
\f[C]
redo-ifchange\ A\ B\ C
\f[]
.fi
.PP
specifies the files A, B, and C as prerequisites for the target file.
.PP
Similarly, a call to
.IP
.nf
\f[C]
redo-ifcreate\ A
\f[]
.fi
.PP
specifies that the target should be rebuilt when the non-existent file A
appears or is deleted.
.PP
As a special case, a do file whose name is prefixed with \[aq]\@\[aq] is
run for side effect.
redux does not create a temporary file when running such a file and uses
\[aq]/dev/stdout\[aq] as the output file name so its output is visible
but is otherwise not saved.
While the $3 parameter is provided for consistency, it is an error for a
task script to write to it since its output is discarded.
.PP
A call to redo without an argument will search for a file named
\f[C]\@all.do\f[] in the current directory.
.PP
A \[aq]\@\[aq] prefixed task is analogous to a \f[C].PHONY\f[] target in
make.
Any do file can also be run as a task by invoking \[aq]redo\[aq] with
the \[aq]-task\[aq] flag.
.SH ENVIRONMENT VARIABLES
.PP
The -verbose variable can be set with the environment variable
\f[C]REDO_VERBOSE\f[].
The value of the variable is is not relevant, but its length corresponds
to the intensity of verbosity.
For example, \f[C]REDO_VERBOSE=xx\f[] is comparable to invoking redo
with the arguments \[aq]-verbose -verbose\[aq].
.PP
The -sh variable can be set with the environment variable
\f[C]REDO_SHELL_ARGS\f[].
This can be used to pass the \[aq]-v\[aq] or \[aq]-x\[aq] options, among
others, to the shell (/bin/sh).
redo prepends a \[aq]-\[aq] to the variable if necessary, so
\[aq]-xv\[aq] could also be specified as \[aq]xv\[aq]
.PP
The -debug option can be set with the environment variable
\f[C]REDO_DEBUG\f[].
The value is not relevant, merely it\[aq]s presence.
\f[C]REDO_DEBUG=true\f[] works fine.
.SH AUTHORS
Gyepi Sam.
